{
  "resourceType": "Library",
  "id": "DataElementHelpers",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://somewhere.org/fhir/uv/onccovid19ml/Library/DataElementHelpers",
  "version": "1.0.0",
  "name": "DataElementHelpers",
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}